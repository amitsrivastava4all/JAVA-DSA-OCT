class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<Integer> smallList = new ArrayList<>();
        List<List<Integer>> bigList= new ArrayList<>();
        helper(candidates, target, smallList, bigList, 0);
        return bigList;
    }

    void helper(int []candidates, int target , List<Integer> smallList, List<List<Integer>> bigList, int index){
        // base case
        if(target == 0 ){
            bigList.add(new ArrayList<>(smallList));
            return ;
        }
        if(target<0){
            return ;
        }
            for(int i = index; i<candidates.length; i++){
                smallList.add(candidates[i]);
                helper(candidates, target - candidates[i], smallList, bigList, i);
                smallList.remove(smallList.size()-1);
            }
    }

}
